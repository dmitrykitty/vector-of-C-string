/tmp/tmp8749kh0k/student/PtrCStringVector.cpp:22:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(res, str1, lenStr1);
/tmp/tmp8749kh0k/student/PtrCStringVector.cpp:23:5:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
    memcpy(res + lenStr1, str2, lenStr2 + 1);
/tmp/tmp8749kh0k/student/PtrCStringVector.cpp:34:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        data_ = new char *[capacity_];
/tmp/tmp8749kh0k/student/PtrCStringVector.cpp:38:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(data_[i], other.data_[i], stringLen);
/tmp/tmp8749kh0k/student/PtrCStringVector.cpp:53:21:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
        data_ = new char *[other.capacity_];
/tmp/tmp8749kh0k/student/PtrCStringVector.cpp:57:13:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
            memcpy(data_[i], other.data_[i], stringLen);
/tmp/tmp8749kh0k/student/PtrCStringVector.cpp:92:9:  [2] (buffer) memcpy:Does not check for buffer overflows when copying to destination (CWE-120).  Make sure destination can always hold the source data. 
        memcpy(data_[size_], text2Add, stringLen);
/tmp/tmp8749kh0k/student/PtrCStringVector.cpp:169:26:  [2] (buffer) char:Statically-sized arrays can be improperly restricted, leading to potential overflows or other issues (CWE-119!/CWE-120).  Perform bounds checking, use functions that limit length, or ensure that the size is larger than the maximum possible length. 
    char** newData = new char *[newCapacity];
/tmp/tmp8749kh0k/student/PtrCStringVector.cpp:18:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    std::size_t lenStr1 = strlen(str1);
/tmp/tmp8749kh0k/student/PtrCStringVector.cpp:19:27:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
    std::size_t lenStr2 = strlen(str2);
/tmp/tmp8749kh0k/student/PtrCStringVector.cpp:36:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            std::size_t stringLen = strlen(other.data_[i]) + 1;
/tmp/tmp8749kh0k/student/PtrCStringVector.cpp:55:37:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
            std::size_t stringLen = strlen(other.data_[i]) + 1;
/tmp/tmp8749kh0k/student/PtrCStringVector.cpp:90:33:  [1] (buffer) strlen:Does not handle strings that are not \0-terminated; if given one it may perform an over-read (it could cause a crash if unprotected) (CWE-126).  
        std::size_t stringLen = strlen(text2Add) + 1;
